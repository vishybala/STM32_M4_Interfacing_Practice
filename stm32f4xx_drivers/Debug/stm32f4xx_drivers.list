
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d6c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08000f30  08000f30  00010f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f38  08000f38  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08000f38  08000f38  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f38  08000f38  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f38  08000f38  00010f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f3c  08000f3c  00010f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08000f40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000020  08000f60  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000058  08000f60  00020058  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000019ad  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000589  00000000  00000000  000219fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000198  00000000  00000000  00021f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000150  00000000  00000000  00022120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002d94  00000000  00000000  00022270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000022e1  00000000  00000000  00025004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000b3c5  00000000  00000000  000272e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000326aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000584  00000000  00000000  000326fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000020 	.word	0x20000020
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000f18 	.word	0x08000f18

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000024 	.word	0x20000024
 8000200:	08000f18 	.word	0x08000f18

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <delay1>:
#include "stm32f446xx.h"
#include <string.h>
#include <stdio.h>

void delay1(void)
{
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 200000; i++);
 800021a:	2300      	movs	r3, #0
 800021c:	607b      	str	r3, [r7, #4]
 800021e:	e002      	b.n	8000226 <delay1+0x12>
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	3301      	adds	r3, #1
 8000224:	607b      	str	r3, [r7, #4]
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4a04      	ldr	r2, [pc, #16]	; (800023c <delay1+0x28>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d9f8      	bls.n	8000220 <delay1+0xc>
}
 800022e:	bf00      	nop
 8000230:	bf00      	nop
 8000232:	370c      	adds	r7, #12
 8000234:	46bd      	mov	sp, r7
 8000236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023a:	4770      	bx	lr
 800023c:	00030d3f 	.word	0x00030d3f

08000240 <USART_GPIOInit>:
 * P USART_
 * P USART_
 */

// TODO CHANGE THESE TO USART SPEC
void USART_GPIOInit(void){
 8000240:	b580      	push	{r7, lr}
 8000242:	b084      	sub	sp, #16
 8000244:	af00      	add	r7, sp, #0
	GPIO_Handler_t USARTPins;

	USARTPins.pGPIOx = GPIOB;
 8000246:	4b0e      	ldr	r3, [pc, #56]	; (8000280 <USART_GPIOInit+0x40>)
 8000248:	607b      	str	r3, [r7, #4]
	USARTPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800024a:	2302      	movs	r3, #2
 800024c:	727b      	strb	r3, [r7, #9]
	USARTPins.GPIO_PinConfig.GPIO_PinAltFuncMode = 7;
 800024e:	2307      	movs	r3, #7
 8000250:	737b      	strb	r3, [r7, #13]
	USARTPins.GPIO_PinConfig.GPIO_PinOutType = GPIO_OUT_TYPE_PP;
 8000252:	2300      	movs	r3, #0
 8000254:	733b      	strb	r3, [r7, #12]
	USARTPins.GPIO_PinConfig.GPIO_PinPuPdCtrl = GPIO_PIN_PU;
 8000256:	2301      	movs	r3, #1
 8000258:	72fb      	strb	r3, [r7, #11]
	USARTPins.GPIO_PinConfig.GPIO_PinSpd = GPIO_OUT_SPD_FAST;
 800025a:	2302      	movs	r3, #2
 800025c:	72bb      	strb	r3, [r7, #10]

	// TODO CHANGE THESE TO USART SPEC
	// RX Pin
	USARTPins.GPIO_PinConfig.GPIO_PinNum = GPIO_PIN_NO_10;
 800025e:	230a      	movs	r3, #10
 8000260:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&USARTPins);
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	4618      	mov	r0, r3
 8000266:	f000 f953 	bl	8000510 <GPIO_Init>

	// TX Pin
	USARTPins.GPIO_PinConfig.GPIO_PinNum = GPIO_PIN_NO_11;
 800026a:	230b      	movs	r3, #11
 800026c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&USARTPins);
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	4618      	mov	r0, r3
 8000272:	f000 f94d 	bl	8000510 <GPIO_Init>
}
 8000276:	bf00      	nop
 8000278:	3710      	adds	r7, #16
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	40020400 	.word	0x40020400

08000284 <USARTx_Init>:

void USARTx_Init(void){
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
	USARTHandler.pUSARTx = USART2;
 8000288:	4b0d      	ldr	r3, [pc, #52]	; (80002c0 <USARTx_Init+0x3c>)
 800028a:	4a0e      	ldr	r2, [pc, #56]	; (80002c4 <USARTx_Init+0x40>)
 800028c:	601a      	str	r2, [r3, #0]
	USARTHandler.USART_Config.USART_Mode = USART_MODE_TX;
 800028e:	4b0c      	ldr	r3, [pc, #48]	; (80002c0 <USARTx_Init+0x3c>)
 8000290:	2200      	movs	r2, #0
 8000292:	711a      	strb	r2, [r3, #4]
	USARTHandler.USART_Config.USART_Baud = USART_BAUD_115200;
 8000294:	4b0a      	ldr	r3, [pc, #40]	; (80002c0 <USARTx_Init+0x3c>)
 8000296:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800029a:	609a      	str	r2, [r3, #8]
	USARTHandler.USART_Config.USART_NumStopbits = USART_STOPBIT_1;
 800029c:	4b08      	ldr	r3, [pc, #32]	; (80002c0 <USARTx_Init+0x3c>)
 800029e:	2200      	movs	r2, #0
 80002a0:	731a      	strb	r2, [r3, #12]
	USARTHandler.USART_Config.USART_Parity = USART_PAR_OFF;
 80002a2:	4b07      	ldr	r3, [pc, #28]	; (80002c0 <USARTx_Init+0x3c>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	739a      	strb	r2, [r3, #14]
	USARTHandler.USART_Config.USART_WordLen = USART_WORDLEN_8BIT;
 80002a8:	4b05      	ldr	r3, [pc, #20]	; (80002c0 <USARTx_Init+0x3c>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	735a      	strb	r2, [r3, #13]
	USARTHandler.USART_Config.USART_HWFlowCtrl = USART_HW_FLOW_CTRL_NONE;
 80002ae:	4b04      	ldr	r3, [pc, #16]	; (80002c0 <USARTx_Init+0x3c>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	73da      	strb	r2, [r3, #15]

	USART_Init(&USARTHandler);
 80002b4:	4802      	ldr	r0, [pc, #8]	; (80002c0 <USARTx_Init+0x3c>)
 80002b6:	f000 fd05 	bl	8000cc4 <USART_Init>
}
 80002ba:	bf00      	nop
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	2000003c 	.word	0x2000003c
 80002c4:	40004400 	.word	0x40004400

080002c8 <main>:

	GPIO_Init(&GPIOBtn);
}

int main(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
	USART_GPIOInit();
 80002cc:	f7ff ffb8 	bl	8000240 <USART_GPIOInit>

	USARTx_Init();
 80002d0:	f7ff ffd8 	bl	8000284 <USARTx_Init>

	USART_PeripheralConfig(USART2, ENABLE);
 80002d4:	2101      	movs	r1, #1
 80002d6:	480b      	ldr	r0, [pc, #44]	; (8000304 <main+0x3c>)
 80002d8:	f000 fddd 	bl	8000e96 <USART_PeripheralConfig>

	while(1)
	{
		// Block till button press
		while (GPIO_ReadInputPin(GPIOC, GPIO_PIN_NO_13));
 80002dc:	bf00      	nop
 80002de:	210d      	movs	r1, #13
 80002e0:	4809      	ldr	r0, [pc, #36]	; (8000308 <main+0x40>)
 80002e2:	f000 fac7 	bl	8000874 <GPIO_ReadInputPin>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d1f8      	bne.n	80002de <main+0x16>
		// Delay for debouncing of button
		delay1();
 80002ec:	f7ff ff92 	bl	8000214 <delay1>

		USART_SendData(&USARTHandler, (uint8_t*)TXData, strlen((char *)TXData));
 80002f0:	4806      	ldr	r0, [pc, #24]	; (800030c <main+0x44>)
 80002f2:	f7ff ff87 	bl	8000204 <strlen>
 80002f6:	4603      	mov	r3, r0
 80002f8:	461a      	mov	r2, r3
 80002fa:	4904      	ldr	r1, [pc, #16]	; (800030c <main+0x44>)
 80002fc:	4804      	ldr	r0, [pc, #16]	; (8000310 <main+0x48>)
 80002fe:	f000 fd68 	bl	8000dd2 <USART_SendData>
		while (GPIO_ReadInputPin(GPIOC, GPIO_PIN_NO_13));
 8000302:	e7eb      	b.n	80002dc <main+0x14>
 8000304:	40004400 	.word	0x40004400
 8000308:	40020800 	.word	0x40020800
 800030c:	20000000 	.word	0x20000000
 8000310:	2000003c 	.word	0x2000003c

08000314 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000314:	480d      	ldr	r0, [pc, #52]	; (800034c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000316:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000318:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800031c:	480c      	ldr	r0, [pc, #48]	; (8000350 <LoopForever+0x6>)
  ldr r1, =_edata
 800031e:	490d      	ldr	r1, [pc, #52]	; (8000354 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000320:	4a0d      	ldr	r2, [pc, #52]	; (8000358 <LoopForever+0xe>)
  movs r3, #0
 8000322:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000324:	e002      	b.n	800032c <LoopCopyDataInit>

08000326 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000326:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000328:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800032a:	3304      	adds	r3, #4

0800032c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800032c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800032e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000330:	d3f9      	bcc.n	8000326 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000332:	4a0a      	ldr	r2, [pc, #40]	; (800035c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000334:	4c0a      	ldr	r4, [pc, #40]	; (8000360 <LoopForever+0x16>)
  movs r3, #0
 8000336:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000338:	e001      	b.n	800033e <LoopFillZerobss>

0800033a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800033a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800033c:	3204      	adds	r2, #4

0800033e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800033e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000340:	d3fb      	bcc.n	800033a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000342:	f000 fdc5 	bl	8000ed0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000346:	f7ff ffbf 	bl	80002c8 <main>

0800034a <LoopForever>:

LoopForever:
  b LoopForever
 800034a:	e7fe      	b.n	800034a <LoopForever>
  ldr   r0, =_estack
 800034c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000354:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000358:	08000f40 	.word	0x08000f40
  ldr r2, =_sbss
 800035c:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000360:	20000058 	.word	0x20000058

08000364 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000364:	e7fe      	b.n	8000364 <ADC_IRQHandler>
	...

08000368 <GPIO_ClockCtrl>:
 * Brief			- Enables or disables the perihperal clock for given GPIOx
 *
 * Notes			-
 ******************************************************************************/
void GPIO_ClockCtrl(GPIO_RegDef_t *pGPIOx, uint8_t EnORDi)
{
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	460b      	mov	r3, r1
 8000372:	70fb      	strb	r3, [r7, #3]
	if (EnORDi == ENABLE){
 8000374:	78fb      	ldrb	r3, [r7, #3]
 8000376:	2b01      	cmp	r3, #1
 8000378:	d157      	bne.n	800042a <GPIO_ClockCtrl+0xc2>
		if (pGPIOx == GPIOA){
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4a5b      	ldr	r2, [pc, #364]	; (80004ec <GPIO_ClockCtrl+0x184>)
 800037e:	4293      	cmp	r3, r2
 8000380:	d106      	bne.n	8000390 <GPIO_ClockCtrl+0x28>
			GPIOA_CLK_EN();
 8000382:	4b5b      	ldr	r3, [pc, #364]	; (80004f0 <GPIO_ClockCtrl+0x188>)
 8000384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000386:	4a5a      	ldr	r2, [pc, #360]	; (80004f0 <GPIO_ClockCtrl+0x188>)
 8000388:	f043 0301 	orr.w	r3, r3, #1
 800038c:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOG_CLK_DI();
		}else if (pGPIOx == GPIOH){
			GPIOH_CLK_DI();
		}
	}
}
 800038e:	e0a6      	b.n	80004de <GPIO_ClockCtrl+0x176>
		}else if (pGPIOx == GPIOB){
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	4a58      	ldr	r2, [pc, #352]	; (80004f4 <GPIO_ClockCtrl+0x18c>)
 8000394:	4293      	cmp	r3, r2
 8000396:	d106      	bne.n	80003a6 <GPIO_ClockCtrl+0x3e>
			GPIOB_CLK_EN();
 8000398:	4b55      	ldr	r3, [pc, #340]	; (80004f0 <GPIO_ClockCtrl+0x188>)
 800039a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800039c:	4a54      	ldr	r2, [pc, #336]	; (80004f0 <GPIO_ClockCtrl+0x188>)
 800039e:	f043 0302 	orr.w	r3, r3, #2
 80003a2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a4:	e09b      	b.n	80004de <GPIO_ClockCtrl+0x176>
		}else if (pGPIOx == GPIOC){
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4a53      	ldr	r2, [pc, #332]	; (80004f8 <GPIO_ClockCtrl+0x190>)
 80003aa:	4293      	cmp	r3, r2
 80003ac:	d106      	bne.n	80003bc <GPIO_ClockCtrl+0x54>
			GPIOC_CLK_EN();
 80003ae:	4b50      	ldr	r3, [pc, #320]	; (80004f0 <GPIO_ClockCtrl+0x188>)
 80003b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b2:	4a4f      	ldr	r2, [pc, #316]	; (80004f0 <GPIO_ClockCtrl+0x188>)
 80003b4:	f043 0304 	orr.w	r3, r3, #4
 80003b8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ba:	e090      	b.n	80004de <GPIO_ClockCtrl+0x176>
		}else if (pGPIOx == GPIOD){
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	4a4f      	ldr	r2, [pc, #316]	; (80004fc <GPIO_ClockCtrl+0x194>)
 80003c0:	4293      	cmp	r3, r2
 80003c2:	d106      	bne.n	80003d2 <GPIO_ClockCtrl+0x6a>
			GPIOD_CLK_EN();
 80003c4:	4b4a      	ldr	r3, [pc, #296]	; (80004f0 <GPIO_ClockCtrl+0x188>)
 80003c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c8:	4a49      	ldr	r2, [pc, #292]	; (80004f0 <GPIO_ClockCtrl+0x188>)
 80003ca:	f043 0308 	orr.w	r3, r3, #8
 80003ce:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d0:	e085      	b.n	80004de <GPIO_ClockCtrl+0x176>
		}else if (pGPIOx == GPIOE){
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	4a4a      	ldr	r2, [pc, #296]	; (8000500 <GPIO_ClockCtrl+0x198>)
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d106      	bne.n	80003e8 <GPIO_ClockCtrl+0x80>
			GPIOE_CLK_EN();
 80003da:	4b45      	ldr	r3, [pc, #276]	; (80004f0 <GPIO_ClockCtrl+0x188>)
 80003dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003de:	4a44      	ldr	r2, [pc, #272]	; (80004f0 <GPIO_ClockCtrl+0x188>)
 80003e0:	f043 0310 	orr.w	r3, r3, #16
 80003e4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e6:	e07a      	b.n	80004de <GPIO_ClockCtrl+0x176>
		}else if (pGPIOx == GPIOF){
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	4a46      	ldr	r2, [pc, #280]	; (8000504 <GPIO_ClockCtrl+0x19c>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d106      	bne.n	80003fe <GPIO_ClockCtrl+0x96>
			GPIOF_CLK_EN();
 80003f0:	4b3f      	ldr	r3, [pc, #252]	; (80004f0 <GPIO_ClockCtrl+0x188>)
 80003f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f4:	4a3e      	ldr	r2, [pc, #248]	; (80004f0 <GPIO_ClockCtrl+0x188>)
 80003f6:	f043 0320 	orr.w	r3, r3, #32
 80003fa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003fc:	e06f      	b.n	80004de <GPIO_ClockCtrl+0x176>
		}else if (pGPIOx == GPIOG){
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4a41      	ldr	r2, [pc, #260]	; (8000508 <GPIO_ClockCtrl+0x1a0>)
 8000402:	4293      	cmp	r3, r2
 8000404:	d106      	bne.n	8000414 <GPIO_ClockCtrl+0xac>
			GPIOG_CLK_EN();
 8000406:	4b3a      	ldr	r3, [pc, #232]	; (80004f0 <GPIO_ClockCtrl+0x188>)
 8000408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040a:	4a39      	ldr	r2, [pc, #228]	; (80004f0 <GPIO_ClockCtrl+0x188>)
 800040c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000410:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000412:	e064      	b.n	80004de <GPIO_ClockCtrl+0x176>
		}else if (pGPIOx == GPIOH){
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	4a3d      	ldr	r2, [pc, #244]	; (800050c <GPIO_ClockCtrl+0x1a4>)
 8000418:	4293      	cmp	r3, r2
 800041a:	d160      	bne.n	80004de <GPIO_ClockCtrl+0x176>
			GPIOH_CLK_EN();
 800041c:	4b34      	ldr	r3, [pc, #208]	; (80004f0 <GPIO_ClockCtrl+0x188>)
 800041e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000420:	4a33      	ldr	r2, [pc, #204]	; (80004f0 <GPIO_ClockCtrl+0x188>)
 8000422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000426:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000428:	e059      	b.n	80004de <GPIO_ClockCtrl+0x176>
	}else if (EnORDi == DISABLE){
 800042a:	78fb      	ldrb	r3, [r7, #3]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d156      	bne.n	80004de <GPIO_ClockCtrl+0x176>
		if (pGPIOx == GPIOA){
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	4a2e      	ldr	r2, [pc, #184]	; (80004ec <GPIO_ClockCtrl+0x184>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d106      	bne.n	8000446 <GPIO_ClockCtrl+0xde>
			GPIOA_CLK_DI();
 8000438:	4b2d      	ldr	r3, [pc, #180]	; (80004f0 <GPIO_ClockCtrl+0x188>)
 800043a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800043c:	4a2c      	ldr	r2, [pc, #176]	; (80004f0 <GPIO_ClockCtrl+0x188>)
 800043e:	f023 0301 	bic.w	r3, r3, #1
 8000442:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000444:	e04b      	b.n	80004de <GPIO_ClockCtrl+0x176>
		}else if (pGPIOx == GPIOB){
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	4a2a      	ldr	r2, [pc, #168]	; (80004f4 <GPIO_ClockCtrl+0x18c>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d106      	bne.n	800045c <GPIO_ClockCtrl+0xf4>
			GPIOB_CLK_DI();
 800044e:	4b28      	ldr	r3, [pc, #160]	; (80004f0 <GPIO_ClockCtrl+0x188>)
 8000450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000452:	4a27      	ldr	r2, [pc, #156]	; (80004f0 <GPIO_ClockCtrl+0x188>)
 8000454:	f023 0302 	bic.w	r3, r3, #2
 8000458:	6313      	str	r3, [r2, #48]	; 0x30
}
 800045a:	e040      	b.n	80004de <GPIO_ClockCtrl+0x176>
		}else if (pGPIOx == GPIOC){
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	4a26      	ldr	r2, [pc, #152]	; (80004f8 <GPIO_ClockCtrl+0x190>)
 8000460:	4293      	cmp	r3, r2
 8000462:	d106      	bne.n	8000472 <GPIO_ClockCtrl+0x10a>
			GPIOC_CLK_DI();
 8000464:	4b22      	ldr	r3, [pc, #136]	; (80004f0 <GPIO_ClockCtrl+0x188>)
 8000466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000468:	4a21      	ldr	r2, [pc, #132]	; (80004f0 <GPIO_ClockCtrl+0x188>)
 800046a:	f023 0304 	bic.w	r3, r3, #4
 800046e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000470:	e035      	b.n	80004de <GPIO_ClockCtrl+0x176>
		}else if (pGPIOx == GPIOD){
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	4a21      	ldr	r2, [pc, #132]	; (80004fc <GPIO_ClockCtrl+0x194>)
 8000476:	4293      	cmp	r3, r2
 8000478:	d106      	bne.n	8000488 <GPIO_ClockCtrl+0x120>
			GPIOD_CLK_DI();
 800047a:	4b1d      	ldr	r3, [pc, #116]	; (80004f0 <GPIO_ClockCtrl+0x188>)
 800047c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800047e:	4a1c      	ldr	r2, [pc, #112]	; (80004f0 <GPIO_ClockCtrl+0x188>)
 8000480:	f023 0308 	bic.w	r3, r3, #8
 8000484:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000486:	e02a      	b.n	80004de <GPIO_ClockCtrl+0x176>
		}else if (pGPIOx == GPIOE){
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	4a1d      	ldr	r2, [pc, #116]	; (8000500 <GPIO_ClockCtrl+0x198>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d106      	bne.n	800049e <GPIO_ClockCtrl+0x136>
			GPIOE_CLK_DI();
 8000490:	4b17      	ldr	r3, [pc, #92]	; (80004f0 <GPIO_ClockCtrl+0x188>)
 8000492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000494:	4a16      	ldr	r2, [pc, #88]	; (80004f0 <GPIO_ClockCtrl+0x188>)
 8000496:	f023 0310 	bic.w	r3, r3, #16
 800049a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800049c:	e01f      	b.n	80004de <GPIO_ClockCtrl+0x176>
		}else if (pGPIOx == GPIOF){
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	4a18      	ldr	r2, [pc, #96]	; (8000504 <GPIO_ClockCtrl+0x19c>)
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d106      	bne.n	80004b4 <GPIO_ClockCtrl+0x14c>
			GPIOF_CLK_DI();
 80004a6:	4b12      	ldr	r3, [pc, #72]	; (80004f0 <GPIO_ClockCtrl+0x188>)
 80004a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004aa:	4a11      	ldr	r2, [pc, #68]	; (80004f0 <GPIO_ClockCtrl+0x188>)
 80004ac:	f023 0320 	bic.w	r3, r3, #32
 80004b0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004b2:	e014      	b.n	80004de <GPIO_ClockCtrl+0x176>
		}else if (pGPIOx == GPIOG){
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	4a14      	ldr	r2, [pc, #80]	; (8000508 <GPIO_ClockCtrl+0x1a0>)
 80004b8:	4293      	cmp	r3, r2
 80004ba:	d106      	bne.n	80004ca <GPIO_ClockCtrl+0x162>
			GPIOG_CLK_DI();
 80004bc:	4b0c      	ldr	r3, [pc, #48]	; (80004f0 <GPIO_ClockCtrl+0x188>)
 80004be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c0:	4a0b      	ldr	r2, [pc, #44]	; (80004f0 <GPIO_ClockCtrl+0x188>)
 80004c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004c6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004c8:	e009      	b.n	80004de <GPIO_ClockCtrl+0x176>
		}else if (pGPIOx == GPIOH){
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4a0f      	ldr	r2, [pc, #60]	; (800050c <GPIO_ClockCtrl+0x1a4>)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d105      	bne.n	80004de <GPIO_ClockCtrl+0x176>
			GPIOH_CLK_DI();
 80004d2:	4b07      	ldr	r3, [pc, #28]	; (80004f0 <GPIO_ClockCtrl+0x188>)
 80004d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d6:	4a06      	ldr	r2, [pc, #24]	; (80004f0 <GPIO_ClockCtrl+0x188>)
 80004d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004dc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004de:	bf00      	nop
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	40020000 	.word	0x40020000
 80004f0:	40023800 	.word	0x40023800
 80004f4:	40020400 	.word	0x40020400
 80004f8:	40020800 	.word	0x40020800
 80004fc:	40020c00 	.word	0x40020c00
 8000500:	40021000 	.word	0x40021000
 8000504:	40021400 	.word	0x40021400
 8000508:	40021800 	.word	0x40021800
 800050c:	40021c00 	.word	0x40021c00

08000510 <GPIO_Init>:

/*
 * GPIO Initialize and De-Initialize
 */
void GPIO_Init(GPIO_Handler_t *pGPIOHandler)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b086      	sub	sp, #24
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000518:	2300      	movs	r3, #0
 800051a:	617b      	str	r3, [r7, #20]

	GPIO_ClockCtrl(pGPIOHandler->pGPIOx, ENABLE);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2101      	movs	r1, #1
 8000522:	4618      	mov	r0, r3
 8000524:	f7ff ff20 	bl	8000368 <GPIO_ClockCtrl>
	// Configure NON-INTERRUPT MODES of GPIO Pin

	if (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) // Non Interrupt Modes
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	795b      	ldrb	r3, [r3, #5]
 800052c:	2b03      	cmp	r3, #3
 800052e:	d820      	bhi.n	8000572 <GPIO_Init+0x62>
	{
		temp = (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNum));
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	795b      	ldrb	r3, [r3, #5]
 8000534:	461a      	mov	r2, r3
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	791b      	ldrb	r3, [r3, #4]
 800053a:	005b      	lsls	r3, r3, #1
 800053c:	fa02 f303 	lsl.w	r3, r2, r3
 8000540:	617b      	str	r3, [r7, #20]
		// Clear Bit-Field of MODERx
		pGPIOHandler->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNum));
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	681a      	ldr	r2, [r3, #0]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	791b      	ldrb	r3, [r3, #4]
 800054c:	005b      	lsls	r3, r3, #1
 800054e:	2103      	movs	r1, #3
 8000550:	fa01 f303 	lsl.w	r3, r1, r3
 8000554:	43db      	mvns	r3, r3
 8000556:	4619      	mov	r1, r3
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	400a      	ands	r2, r1
 800055e:	601a      	str	r2, [r3, #0]
		// Set Bit-Field of MODERx
		pGPIOHandler->pGPIOx->MODER |= temp;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	6819      	ldr	r1, [r3, #0]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	697a      	ldr	r2, [r7, #20]
 800056c:	430a      	orrs	r2, r1
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	e0c1      	b.n	80006f6 <GPIO_Init+0x1e6>

	} else // Configure INTERRUPT MODES of GPIO Pin
	{
		if(pGPIOHandler->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INT_FT)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	795b      	ldrb	r3, [r3, #5]
 8000576:	2b04      	cmp	r3, #4
 8000578:	d117      	bne.n	80005aa <GPIO_Init+0x9a>
		{
			// Configure Falling Trigger Selection Register
			EXTI->FTSR |= (1 << pGPIOHandler->GPIO_PinConfig.GPIO_PinNum);
 800057a:	4b47      	ldr	r3, [pc, #284]	; (8000698 <GPIO_Init+0x188>)
 800057c:	68db      	ldr	r3, [r3, #12]
 800057e:	687a      	ldr	r2, [r7, #4]
 8000580:	7912      	ldrb	r2, [r2, #4]
 8000582:	4611      	mov	r1, r2
 8000584:	2201      	movs	r2, #1
 8000586:	408a      	lsls	r2, r1
 8000588:	4611      	mov	r1, r2
 800058a:	4a43      	ldr	r2, [pc, #268]	; (8000698 <GPIO_Init+0x188>)
 800058c:	430b      	orrs	r3, r1
 800058e:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandler->GPIO_PinConfig.GPIO_PinNum);
 8000590:	4b41      	ldr	r3, [pc, #260]	; (8000698 <GPIO_Init+0x188>)
 8000592:	689b      	ldr	r3, [r3, #8]
 8000594:	687a      	ldr	r2, [r7, #4]
 8000596:	7912      	ldrb	r2, [r2, #4]
 8000598:	4611      	mov	r1, r2
 800059a:	2201      	movs	r2, #1
 800059c:	408a      	lsls	r2, r1
 800059e:	43d2      	mvns	r2, r2
 80005a0:	4611      	mov	r1, r2
 80005a2:	4a3d      	ldr	r2, [pc, #244]	; (8000698 <GPIO_Init+0x188>)
 80005a4:	400b      	ands	r3, r1
 80005a6:	6093      	str	r3, [r2, #8]
 80005a8:	e035      	b.n	8000616 <GPIO_Init+0x106>

		} else if(pGPIOHandler->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INT_RT)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	795b      	ldrb	r3, [r3, #5]
 80005ae:	2b05      	cmp	r3, #5
 80005b0:	d117      	bne.n	80005e2 <GPIO_Init+0xd2>
		{
			// Configure Rising Trigger Selection Register
			EXTI->RTSR |= (1 << pGPIOHandler->GPIO_PinConfig.GPIO_PinNum);
 80005b2:	4b39      	ldr	r3, [pc, #228]	; (8000698 <GPIO_Init+0x188>)
 80005b4:	689b      	ldr	r3, [r3, #8]
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	7912      	ldrb	r2, [r2, #4]
 80005ba:	4611      	mov	r1, r2
 80005bc:	2201      	movs	r2, #1
 80005be:	408a      	lsls	r2, r1
 80005c0:	4611      	mov	r1, r2
 80005c2:	4a35      	ldr	r2, [pc, #212]	; (8000698 <GPIO_Init+0x188>)
 80005c4:	430b      	orrs	r3, r1
 80005c6:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandler->GPIO_PinConfig.GPIO_PinNum);
 80005c8:	4b33      	ldr	r3, [pc, #204]	; (8000698 <GPIO_Init+0x188>)
 80005ca:	68db      	ldr	r3, [r3, #12]
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	7912      	ldrb	r2, [r2, #4]
 80005d0:	4611      	mov	r1, r2
 80005d2:	2201      	movs	r2, #1
 80005d4:	408a      	lsls	r2, r1
 80005d6:	43d2      	mvns	r2, r2
 80005d8:	4611      	mov	r1, r2
 80005da:	4a2f      	ldr	r2, [pc, #188]	; (8000698 <GPIO_Init+0x188>)
 80005dc:	400b      	ands	r3, r1
 80005de:	60d3      	str	r3, [r2, #12]
 80005e0:	e019      	b.n	8000616 <GPIO_Init+0x106>

		} else if(pGPIOHandler->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INT_RFT)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	795b      	ldrb	r3, [r3, #5]
 80005e6:	2b06      	cmp	r3, #6
 80005e8:	d115      	bne.n	8000616 <GPIO_Init+0x106>
		{
			// Configure FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandler->GPIO_PinConfig.GPIO_PinNum);
 80005ea:	4b2b      	ldr	r3, [pc, #172]	; (8000698 <GPIO_Init+0x188>)
 80005ec:	68db      	ldr	r3, [r3, #12]
 80005ee:	687a      	ldr	r2, [r7, #4]
 80005f0:	7912      	ldrb	r2, [r2, #4]
 80005f2:	4611      	mov	r1, r2
 80005f4:	2201      	movs	r2, #1
 80005f6:	408a      	lsls	r2, r1
 80005f8:	4611      	mov	r1, r2
 80005fa:	4a27      	ldr	r2, [pc, #156]	; (8000698 <GPIO_Init+0x188>)
 80005fc:	430b      	orrs	r3, r1
 80005fe:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandler->GPIO_PinConfig.GPIO_PinNum);
 8000600:	4b25      	ldr	r3, [pc, #148]	; (8000698 <GPIO_Init+0x188>)
 8000602:	689b      	ldr	r3, [r3, #8]
 8000604:	687a      	ldr	r2, [r7, #4]
 8000606:	7912      	ldrb	r2, [r2, #4]
 8000608:	4611      	mov	r1, r2
 800060a:	2201      	movs	r2, #1
 800060c:	408a      	lsls	r2, r1
 800060e:	4611      	mov	r1, r2
 8000610:	4a21      	ldr	r2, [pc, #132]	; (8000698 <GPIO_Init+0x188>)
 8000612:	430b      	orrs	r3, r1
 8000614:	6093      	str	r3, [r2, #8]

		}

		// Configure the GPIO Port Selection in SYSCFG_EXTI Control Register
		uint8_t temp1 = pGPIOHandler->GPIO_PinConfig.GPIO_PinNum / 4;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	791b      	ldrb	r3, [r3, #4]
 800061a:	089b      	lsrs	r3, r3, #2
 800061c:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandler->GPIO_PinConfig.GPIO_PinNum % 4;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	791b      	ldrb	r3, [r3, #4]
 8000622:	f003 0303 	and.w	r3, r3, #3
 8000626:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_EXTICODE(pGPIOHandler->pGPIOx);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a1b      	ldr	r2, [pc, #108]	; (800069c <GPIO_Init+0x18c>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d044      	beq.n	80006bc <GPIO_Init+0x1ac>
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a1a      	ldr	r2, [pc, #104]	; (80006a0 <GPIO_Init+0x190>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d02b      	beq.n	8000694 <GPIO_Init+0x184>
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a18      	ldr	r2, [pc, #96]	; (80006a4 <GPIO_Init+0x194>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d024      	beq.n	8000690 <GPIO_Init+0x180>
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a17      	ldr	r2, [pc, #92]	; (80006a8 <GPIO_Init+0x198>)
 800064c:	4293      	cmp	r3, r2
 800064e:	d01d      	beq.n	800068c <GPIO_Init+0x17c>
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a15      	ldr	r2, [pc, #84]	; (80006ac <GPIO_Init+0x19c>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d016      	beq.n	8000688 <GPIO_Init+0x178>
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a14      	ldr	r2, [pc, #80]	; (80006b0 <GPIO_Init+0x1a0>)
 8000660:	4293      	cmp	r3, r2
 8000662:	d00f      	beq.n	8000684 <GPIO_Init+0x174>
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a12      	ldr	r2, [pc, #72]	; (80006b4 <GPIO_Init+0x1a4>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d008      	beq.n	8000680 <GPIO_Init+0x170>
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a11      	ldr	r2, [pc, #68]	; (80006b8 <GPIO_Init+0x1a8>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d101      	bne.n	800067c <GPIO_Init+0x16c>
 8000678:	2307      	movs	r3, #7
 800067a:	e020      	b.n	80006be <GPIO_Init+0x1ae>
 800067c:	2300      	movs	r3, #0
 800067e:	e01e      	b.n	80006be <GPIO_Init+0x1ae>
 8000680:	2306      	movs	r3, #6
 8000682:	e01c      	b.n	80006be <GPIO_Init+0x1ae>
 8000684:	2305      	movs	r3, #5
 8000686:	e01a      	b.n	80006be <GPIO_Init+0x1ae>
 8000688:	2304      	movs	r3, #4
 800068a:	e018      	b.n	80006be <GPIO_Init+0x1ae>
 800068c:	2303      	movs	r3, #3
 800068e:	e016      	b.n	80006be <GPIO_Init+0x1ae>
 8000690:	2302      	movs	r3, #2
 8000692:	e014      	b.n	80006be <GPIO_Init+0x1ae>
 8000694:	2301      	movs	r3, #1
 8000696:	e012      	b.n	80006be <GPIO_Init+0x1ae>
 8000698:	40013c00 	.word	0x40013c00
 800069c:	40020000 	.word	0x40020000
 80006a0:	40020400 	.word	0x40020400
 80006a4:	40020800 	.word	0x40020800
 80006a8:	40020c00 	.word	0x40020c00
 80006ac:	40021000 	.word	0x40021000
 80006b0:	40021400 	.word	0x40021400
 80006b4:	40021800 	.word	0x40021800
 80006b8:	40021c00 	.word	0x40021c00
 80006bc:	2300      	movs	r3, #0
 80006be:	747b      	strb	r3, [r7, #17]

		SYSCFG_CLK_EN();
 80006c0:	4b69      	ldr	r3, [pc, #420]	; (8000868 <GPIO_Init+0x358>)
 80006c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c4:	4a68      	ldr	r2, [pc, #416]	; (8000868 <GPIO_Init+0x358>)
 80006c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ca:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = (portcode << (temp2 * 4));
 80006cc:	7c7a      	ldrb	r2, [r7, #17]
 80006ce:	7cbb      	ldrb	r3, [r7, #18]
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	fa02 f103 	lsl.w	r1, r2, r3
 80006d6:	4a65      	ldr	r2, [pc, #404]	; (800086c <GPIO_Init+0x35c>)
 80006d8:	7cfb      	ldrb	r3, [r7, #19]
 80006da:	3302      	adds	r3, #2
 80006dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// Enable the EXTI Interrupt Delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandler->GPIO_PinConfig.GPIO_PinNum);
 80006e0:	4b63      	ldr	r3, [pc, #396]	; (8000870 <GPIO_Init+0x360>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	687a      	ldr	r2, [r7, #4]
 80006e6:	7912      	ldrb	r2, [r2, #4]
 80006e8:	4611      	mov	r1, r2
 80006ea:	2201      	movs	r2, #1
 80006ec:	408a      	lsls	r2, r1
 80006ee:	4611      	mov	r1, r2
 80006f0:	4a5f      	ldr	r2, [pc, #380]	; (8000870 <GPIO_Init+0x360>)
 80006f2:	430b      	orrs	r3, r1
 80006f4:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]

	// 2. Configure Speed of GPIO Pin

	temp = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpd << (2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNum));
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	799b      	ldrb	r3, [r3, #6]
 80006fe:	461a      	mov	r2, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	791b      	ldrb	r3, [r3, #4]
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	fa02 f303 	lsl.w	r3, r2, r3
 800070a:	617b      	str	r3, [r7, #20]
	// Clear Bit-Field of OSPEEDRx
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNum));
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	689a      	ldr	r2, [r3, #8]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	791b      	ldrb	r3, [r3, #4]
 8000716:	005b      	lsls	r3, r3, #1
 8000718:	2103      	movs	r1, #3
 800071a:	fa01 f303 	lsl.w	r3, r1, r3
 800071e:	43db      	mvns	r3, r3
 8000720:	4619      	mov	r1, r3
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	400a      	ands	r2, r1
 8000728:	609a      	str	r2, [r3, #8]
	// Set Bit-Field of OSPEEDRx
	pGPIOHandler->pGPIOx->OSPEEDR |= temp;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	6899      	ldr	r1, [r3, #8]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	697a      	ldr	r2, [r7, #20]
 8000736:	430a      	orrs	r2, r1
 8000738:	609a      	str	r2, [r3, #8]
	temp = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	617b      	str	r3, [r7, #20]

	// 3. Configure Pull Up/ Pull Down Registers

	temp = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPuPdCtrl << (2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNum));
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	79db      	ldrb	r3, [r3, #7]
 8000742:	461a      	mov	r2, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	791b      	ldrb	r3, [r3, #4]
 8000748:	005b      	lsls	r3, r3, #1
 800074a:	fa02 f303 	lsl.w	r3, r2, r3
 800074e:	617b      	str	r3, [r7, #20]
	// Clear Bit-Field of PUPDRx
	pGPIOHandler->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNum));
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	68da      	ldr	r2, [r3, #12]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	791b      	ldrb	r3, [r3, #4]
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	2103      	movs	r1, #3
 800075e:	fa01 f303 	lsl.w	r3, r1, r3
 8000762:	43db      	mvns	r3, r3
 8000764:	4619      	mov	r1, r3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	400a      	ands	r2, r1
 800076c:	60da      	str	r2, [r3, #12]
	// Set Bit-Field of PUPDRx
	pGPIOHandler->pGPIOx->PUPDR |= temp;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	68d9      	ldr	r1, [r3, #12]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	697a      	ldr	r2, [r7, #20]
 800077a:	430a      	orrs	r2, r1
 800077c:	60da      	str	r2, [r3, #12]
	temp = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]

	// 4. Configure the Output Type

	temp = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOutType << (pGPIOHandler->GPIO_PinConfig.GPIO_PinNum));
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	7a1b      	ldrb	r3, [r3, #8]
 8000786:	461a      	mov	r2, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	791b      	ldrb	r3, [r3, #4]
 800078c:	fa02 f303 	lsl.w	r3, r2, r3
 8000790:	617b      	str	r3, [r7, #20]
	// Clear Bit-Field of OTYPERx
	pGPIOHandler->pGPIOx->OTYPER &= ~(0x3 << (2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNum));
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	685a      	ldr	r2, [r3, #4]
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	791b      	ldrb	r3, [r3, #4]
 800079c:	005b      	lsls	r3, r3, #1
 800079e:	2103      	movs	r1, #3
 80007a0:	fa01 f303 	lsl.w	r3, r1, r3
 80007a4:	43db      	mvns	r3, r3
 80007a6:	4619      	mov	r1, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	400a      	ands	r2, r1
 80007ae:	605a      	str	r2, [r3, #4]
	// Set Bit-Field of OTYPERx
	pGPIOHandler->pGPIOx->OTYPER |= temp;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	6859      	ldr	r1, [r3, #4]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	697a      	ldr	r2, [r7, #20]
 80007bc:	430a      	orrs	r2, r1
 80007be:	605a      	str	r2, [r3, #4]
	temp = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]

	// 5. Configure Alternate Function

	uint8_t temp1 = pGPIOHandler->GPIO_PinConfig.GPIO_PinNum / 8;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	791b      	ldrb	r3, [r3, #4]
 80007c8:	08db      	lsrs	r3, r3, #3
 80007ca:	743b      	strb	r3, [r7, #16]
	uint8_t temp2 = pGPIOHandler->GPIO_PinConfig.GPIO_PinNum % 8;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	791b      	ldrb	r3, [r3, #4]
 80007d0:	f003 0307 	and.w	r3, r3, #7
 80007d4:	73fb      	strb	r3, [r7, #15]
	if (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	795b      	ldrb	r3, [r3, #5]
 80007da:	2b02      	cmp	r3, #2
 80007dc:	d140      	bne.n	8000860 <GPIO_Init+0x350>
	{
		if (temp1 == 0)
 80007de:	7c3b      	ldrb	r3, [r7, #16]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d11d      	bne.n	8000820 <GPIO_Init+0x310>
		{
			pGPIOHandler->pGPIOx->AFRL &= ~(0xF << (4 * temp2));
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	6a1a      	ldr	r2, [r3, #32]
 80007ea:	7bfb      	ldrb	r3, [r7, #15]
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	210f      	movs	r1, #15
 80007f0:	fa01 f303 	lsl.w	r3, r1, r3
 80007f4:	43db      	mvns	r3, r3
 80007f6:	4619      	mov	r1, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	400a      	ands	r2, r1
 80007fe:	621a      	str	r2, [r3, #32]
			pGPIOHandler->pGPIOx->AFRL |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFuncMode << (4 * temp2));
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	6a1a      	ldr	r2, [r3, #32]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	7a5b      	ldrb	r3, [r3, #9]
 800080a:	4619      	mov	r1, r3
 800080c:	7bfb      	ldrb	r3, [r7, #15]
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	fa01 f303 	lsl.w	r3, r1, r3
 8000814:	4619      	mov	r1, r3
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	430a      	orrs	r2, r1
 800081c:	621a      	str	r2, [r3, #32]
		{
			pGPIOHandler->pGPIOx->AFRH &= ~(0xF << (4 * temp2));
			pGPIOHandler->pGPIOx->AFRH |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFuncMode << (4 * temp2));
		}
	}
}
 800081e:	e01f      	b.n	8000860 <GPIO_Init+0x350>
		} else if (temp1 == 1)
 8000820:	7c3b      	ldrb	r3, [r7, #16]
 8000822:	2b01      	cmp	r3, #1
 8000824:	d11c      	bne.n	8000860 <GPIO_Init+0x350>
			pGPIOHandler->pGPIOx->AFRH &= ~(0xF << (4 * temp2));
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800082c:	7bfb      	ldrb	r3, [r7, #15]
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	210f      	movs	r1, #15
 8000832:	fa01 f303 	lsl.w	r3, r1, r3
 8000836:	43db      	mvns	r3, r3
 8000838:	4619      	mov	r1, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	400a      	ands	r2, r1
 8000840:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFRH |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFuncMode << (4 * temp2));
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	7a5b      	ldrb	r3, [r3, #9]
 800084c:	4619      	mov	r1, r3
 800084e:	7bfb      	ldrb	r3, [r7, #15]
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	fa01 f303 	lsl.w	r3, r1, r3
 8000856:	4619      	mov	r1, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	430a      	orrs	r2, r1
 800085e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000860:	bf00      	nop
 8000862:	3718      	adds	r7, #24
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40023800 	.word	0x40023800
 800086c:	40013800 	.word	0x40013800
 8000870:	40013c00 	.word	0x40013c00

08000874 <GPIO_ReadInputPin>:

/*
 * GPIO Read/Write
 */
uint8_t GPIO_ReadInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNum)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	460b      	mov	r3, r1
 800087e:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = ((pGPIOx->IDR >> PinNum) & 0x00000001);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	691a      	ldr	r2, [r3, #16]
 8000884:	78fb      	ldrb	r3, [r7, #3]
 8000886:	fa22 f303 	lsr.w	r3, r2, r3
 800088a:	b2db      	uxtb	r3, r3
 800088c:	f003 0301 	and.w	r3, r3, #1
 8000890:	73fb      	strb	r3, [r7, #15]
	return value;
 8000892:	7bfb      	ldrb	r3, [r7, #15]
}
 8000894:	4618      	mov	r0, r3
 8000896:	3714      	adds	r7, #20
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <RCC_GetPLLOutputClk>:
#include <stm32f446xx_rcc_driver.h>

/*
 * Peripheral Clock Control and Fetching
 */
uint32_t RCC_GetPLLOutputClk(void){
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
	uint32_t pllClk = 0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
	return pllClk;
 80008aa:	687b      	ldr	r3, [r7, #4]
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <RCC_GetPCLK1Val>:

uint32_t RCC_GetPCLK1Val(void){
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08a      	sub	sp, #40	; 0x28
 80008bc:	af00      	add	r7, sp, #0
	uint32_t pclk1, sysClk,apb1p;
	uint16_t ahbp;
	uint8_t clksrc, preScale;

	uint16_t AHB_PreScalarArray[8] = {2,4,8,16,128,256,512};
 80008be:	f107 0308 	add.w	r3, r7, #8
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	2302      	movs	r3, #2
 80008ce:	813b      	strh	r3, [r7, #8]
 80008d0:	2304      	movs	r3, #4
 80008d2:	817b      	strh	r3, [r7, #10]
 80008d4:	2308      	movs	r3, #8
 80008d6:	81bb      	strh	r3, [r7, #12]
 80008d8:	2310      	movs	r3, #16
 80008da:	81fb      	strh	r3, [r7, #14]
 80008dc:	2380      	movs	r3, #128	; 0x80
 80008de:	823b      	strh	r3, [r7, #16]
 80008e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008e4:	827b      	strh	r3, [r7, #18]
 80008e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008ea:	82bb      	strh	r3, [r7, #20]
	uint16_t APB1_PreScalarArray[4] = {2,4,8,16};
 80008ec:	4a2a      	ldr	r2, [pc, #168]	; (8000998 <RCC_GetPCLK1Val+0xe0>)
 80008ee:	463b      	mov	r3, r7
 80008f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008f4:	e883 0003 	stmia.w	r3, {r0, r1}

	// Find Clock Source Rate
	clksrc = ((RCC->CFGR >> 2) & 0x3);
 80008f8:	4b28      	ldr	r3, [pc, #160]	; (800099c <RCC_GetPCLK1Val+0xe4>)
 80008fa:	689b      	ldr	r3, [r3, #8]
 80008fc:	089b      	lsrs	r3, r3, #2
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	f003 0303 	and.w	r3, r3, #3
 8000904:	777b      	strb	r3, [r7, #29]

	if(clksrc == 0)
 8000906:	7f7b      	ldrb	r3, [r7, #29]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d102      	bne.n	8000912 <RCC_GetPCLK1Val+0x5a>
	{
		sysClk = 16000000;
 800090c:	4b24      	ldr	r3, [pc, #144]	; (80009a0 <RCC_GetPCLK1Val+0xe8>)
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
 8000910:	e00b      	b.n	800092a <RCC_GetPCLK1Val+0x72>
	} else if(clksrc == 1)
 8000912:	7f7b      	ldrb	r3, [r7, #29]
 8000914:	2b01      	cmp	r3, #1
 8000916:	d102      	bne.n	800091e <RCC_GetPCLK1Val+0x66>
	{
		sysClk = 8000000;
 8000918:	4b22      	ldr	r3, [pc, #136]	; (80009a4 <RCC_GetPCLK1Val+0xec>)
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
 800091c:	e005      	b.n	800092a <RCC_GetPCLK1Val+0x72>
	} else if(clksrc == 2)
 800091e:	7f7b      	ldrb	r3, [r7, #29]
 8000920:	2b02      	cmp	r3, #2
 8000922:	d102      	bne.n	800092a <RCC_GetPCLK1Val+0x72>
	{
		sysClk = RCC_GetPLLOutputClk();
 8000924:	f7ff ffbc 	bl	80008a0 <RCC_GetPLLOutputClk>
 8000928:	6278      	str	r0, [r7, #36]	; 0x24
	}

	// Fetching AHB Prescaler value
	preScale = ((RCC->CFGR >> 4) & 0xF);
 800092a:	4b1c      	ldr	r3, [pc, #112]	; (800099c <RCC_GetPCLK1Val+0xe4>)
 800092c:	689b      	ldr	r3, [r3, #8]
 800092e:	091b      	lsrs	r3, r3, #4
 8000930:	b2db      	uxtb	r3, r3
 8000932:	f003 030f 	and.w	r3, r3, #15
 8000936:	773b      	strb	r3, [r7, #28]

	if(preScale < 8)
 8000938:	7f3b      	ldrb	r3, [r7, #28]
 800093a:	2b07      	cmp	r3, #7
 800093c:	d802      	bhi.n	8000944 <RCC_GetPCLK1Val+0x8c>
	{
		ahbp = 1;
 800093e:	2301      	movs	r3, #1
 8000940:	83fb      	strh	r3, [r7, #30]
 8000942:	e007      	b.n	8000954 <RCC_GetPCLK1Val+0x9c>
	} else {
		ahbp = AHB_PreScalarArray[preScale - 8];
 8000944:	7f3b      	ldrb	r3, [r7, #28]
 8000946:	3b08      	subs	r3, #8
 8000948:	005b      	lsls	r3, r3, #1
 800094a:	3328      	adds	r3, #40	; 0x28
 800094c:	443b      	add	r3, r7
 800094e:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8000952:	83fb      	strh	r3, [r7, #30]
	}

	// Fetching APB1 Prescaler Value
	preScale = ((RCC->CFGR >> 10) & 0x7);
 8000954:	4b11      	ldr	r3, [pc, #68]	; (800099c <RCC_GetPCLK1Val+0xe4>)
 8000956:	689b      	ldr	r3, [r3, #8]
 8000958:	0a9b      	lsrs	r3, r3, #10
 800095a:	b2db      	uxtb	r3, r3
 800095c:	f003 0307 	and.w	r3, r3, #7
 8000960:	773b      	strb	r3, [r7, #28]

	if(preScale < 4)
 8000962:	7f3b      	ldrb	r3, [r7, #28]
 8000964:	2b03      	cmp	r3, #3
 8000966:	d802      	bhi.n	800096e <RCC_GetPCLK1Val+0xb6>
	{
		apb1p = 1;
 8000968:	2301      	movs	r3, #1
 800096a:	623b      	str	r3, [r7, #32]
 800096c:	e007      	b.n	800097e <RCC_GetPCLK1Val+0xc6>
	} else {
		apb1p = APB1_PreScalarArray[preScale - 4];
 800096e:	7f3b      	ldrb	r3, [r7, #28]
 8000970:	3b04      	subs	r3, #4
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	3328      	adds	r3, #40	; 0x28
 8000976:	443b      	add	r3, r7
 8000978:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 800097c:	623b      	str	r3, [r7, #32]
	}

	// Calculate pClk value with prescaler now found
	pclk1 = (sysClk / ahbp) / apb1p;
 800097e:	8bfb      	ldrh	r3, [r7, #30]
 8000980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000982:	fbb2 f2f3 	udiv	r2, r2, r3
 8000986:	6a3b      	ldr	r3, [r7, #32]
 8000988:	fbb2 f3f3 	udiv	r3, r2, r3
 800098c:	61bb      	str	r3, [r7, #24]

	return pclk1;
 800098e:	69bb      	ldr	r3, [r7, #24]
}
 8000990:	4618      	mov	r0, r3
 8000992:	3728      	adds	r7, #40	; 0x28
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	08000f30 	.word	0x08000f30
 800099c:	40023800 	.word	0x40023800
 80009a0:	00f42400 	.word	0x00f42400
 80009a4:	007a1200 	.word	0x007a1200

080009a8 <RCC_GetPCLK2Val>:

uint32_t RCC_GetPCLK2Val(void){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	; 0x28
 80009ac:	af00      	add	r7, sp, #0
	uint32_t pclk2, sysClk,apb2p;
	uint16_t ahbp;
	uint8_t clksrc, preScale;

	uint16_t AHB_PreScalarArray[8] = {2,4,8,16,128,256,512};
 80009ae:	f107 0308 	add.w	r3, r7, #8
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
 80009bc:	2302      	movs	r3, #2
 80009be:	813b      	strh	r3, [r7, #8]
 80009c0:	2304      	movs	r3, #4
 80009c2:	817b      	strh	r3, [r7, #10]
 80009c4:	2308      	movs	r3, #8
 80009c6:	81bb      	strh	r3, [r7, #12]
 80009c8:	2310      	movs	r3, #16
 80009ca:	81fb      	strh	r3, [r7, #14]
 80009cc:	2380      	movs	r3, #128	; 0x80
 80009ce:	823b      	strh	r3, [r7, #16]
 80009d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009d4:	827b      	strh	r3, [r7, #18]
 80009d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009da:	82bb      	strh	r3, [r7, #20]
	uint16_t APB2_PreScalarArray[4] = {2,4,8,16};
 80009dc:	4a2a      	ldr	r2, [pc, #168]	; (8000a88 <RCC_GetPCLK2Val+0xe0>)
 80009de:	463b      	mov	r3, r7
 80009e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009e4:	e883 0003 	stmia.w	r3, {r0, r1}

	// Find Clock Source Rate
	clksrc = ((RCC->CFGR >> 2) & 0x3);
 80009e8:	4b28      	ldr	r3, [pc, #160]	; (8000a8c <RCC_GetPCLK2Val+0xe4>)
 80009ea:	689b      	ldr	r3, [r3, #8]
 80009ec:	089b      	lsrs	r3, r3, #2
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	f003 0303 	and.w	r3, r3, #3
 80009f4:	777b      	strb	r3, [r7, #29]

	if(clksrc == 0)
 80009f6:	7f7b      	ldrb	r3, [r7, #29]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d102      	bne.n	8000a02 <RCC_GetPCLK2Val+0x5a>
	{
		sysClk = 16000000;
 80009fc:	4b24      	ldr	r3, [pc, #144]	; (8000a90 <RCC_GetPCLK2Val+0xe8>)
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
 8000a00:	e00b      	b.n	8000a1a <RCC_GetPCLK2Val+0x72>
	} else if(clksrc == 1)
 8000a02:	7f7b      	ldrb	r3, [r7, #29]
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d102      	bne.n	8000a0e <RCC_GetPCLK2Val+0x66>
	{
		sysClk = 8000000;
 8000a08:	4b22      	ldr	r3, [pc, #136]	; (8000a94 <RCC_GetPCLK2Val+0xec>)
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a0c:	e005      	b.n	8000a1a <RCC_GetPCLK2Val+0x72>
	} else if(clksrc == 2)
 8000a0e:	7f7b      	ldrb	r3, [r7, #29]
 8000a10:	2b02      	cmp	r3, #2
 8000a12:	d102      	bne.n	8000a1a <RCC_GetPCLK2Val+0x72>
	{
		sysClk = RCC_GetPLLOutputClk();
 8000a14:	f7ff ff44 	bl	80008a0 <RCC_GetPLLOutputClk>
 8000a18:	6278      	str	r0, [r7, #36]	; 0x24
	}

	// Fetching AHB Prescaler value
	preScale = ((RCC->CFGR >> 4) & 0xF);
 8000a1a:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <RCC_GetPCLK2Val+0xe4>)
 8000a1c:	689b      	ldr	r3, [r3, #8]
 8000a1e:	091b      	lsrs	r3, r3, #4
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	f003 030f 	and.w	r3, r3, #15
 8000a26:	773b      	strb	r3, [r7, #28]

	if(preScale < 8)
 8000a28:	7f3b      	ldrb	r3, [r7, #28]
 8000a2a:	2b07      	cmp	r3, #7
 8000a2c:	d802      	bhi.n	8000a34 <RCC_GetPCLK2Val+0x8c>
	{
		ahbp = 1;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	83fb      	strh	r3, [r7, #30]
 8000a32:	e007      	b.n	8000a44 <RCC_GetPCLK2Val+0x9c>
	} else {
		ahbp = AHB_PreScalarArray[preScale - 8];
 8000a34:	7f3b      	ldrb	r3, [r7, #28]
 8000a36:	3b08      	subs	r3, #8
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	3328      	adds	r3, #40	; 0x28
 8000a3c:	443b      	add	r3, r7
 8000a3e:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8000a42:	83fb      	strh	r3, [r7, #30]
	}

	// Fetching APB1 Prescaler Value
	preScale = ((RCC->CFGR >> 10) & 0x7);
 8000a44:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <RCC_GetPCLK2Val+0xe4>)
 8000a46:	689b      	ldr	r3, [r3, #8]
 8000a48:	0a9b      	lsrs	r3, r3, #10
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	f003 0307 	and.w	r3, r3, #7
 8000a50:	773b      	strb	r3, [r7, #28]

	if(preScale < 4)
 8000a52:	7f3b      	ldrb	r3, [r7, #28]
 8000a54:	2b03      	cmp	r3, #3
 8000a56:	d802      	bhi.n	8000a5e <RCC_GetPCLK2Val+0xb6>
	{
		apb2p = 1;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	623b      	str	r3, [r7, #32]
 8000a5c:	e007      	b.n	8000a6e <RCC_GetPCLK2Val+0xc6>
	} else {
		apb2p = APB2_PreScalarArray[preScale - 4];
 8000a5e:	7f3b      	ldrb	r3, [r7, #28]
 8000a60:	3b04      	subs	r3, #4
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	3328      	adds	r3, #40	; 0x28
 8000a66:	443b      	add	r3, r7
 8000a68:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 8000a6c:	623b      	str	r3, [r7, #32]
	}

	// Calculate pClk value with prescaler now found
	pclk2 = (sysClk / ahbp) / apb2p;
 8000a6e:	8bfb      	ldrh	r3, [r7, #30]
 8000a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a72:	fbb2 f2f3 	udiv	r2, r2, r3
 8000a76:	6a3b      	ldr	r3, [r7, #32]
 8000a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a7c:	61bb      	str	r3, [r7, #24]

	return pclk2;
 8000a7e:	69bb      	ldr	r3, [r7, #24]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3728      	adds	r7, #40	; 0x28
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	08000f30 	.word	0x08000f30
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	00f42400 	.word	0x00f42400
 8000a94:	007a1200 	.word	0x007a1200

08000a98 <USART_ClockCtrl>:
#include "stm32f446xx_rcc_driver.h"

/*
 * USART Peripheral Clock Control
 */
void USART_ClockCtrl(USART_RegDef_t *pUSARTx, uint8_t EnORDi){
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	460b      	mov	r3, r1
 8000aa2:	70fb      	strb	r3, [r7, #3]
	if (EnORDi == ENABLE){
 8000aa4:	78fb      	ldrb	r3, [r7, #3]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d141      	bne.n	8000b2e <USART_ClockCtrl+0x96>
		if (pUSARTx == USART1){
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4a45      	ldr	r2, [pc, #276]	; (8000bc4 <USART_ClockCtrl+0x12c>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d106      	bne.n	8000ac0 <USART_ClockCtrl+0x28>
			USART1_CLK_EN();
 8000ab2:	4b45      	ldr	r3, [pc, #276]	; (8000bc8 <USART_ClockCtrl+0x130>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab6:	4a44      	ldr	r2, [pc, #272]	; (8000bc8 <USART_ClockCtrl+0x130>)
 8000ab8:	f043 0310 	orr.w	r3, r3, #16
 8000abc:	6453      	str	r3, [r2, #68]	; 0x44
			UART5_CLK_DI();
		} else if (pUSARTx == USART6){
			USART6_CLK_DI();
		}
	}
}
 8000abe:	e07a      	b.n	8000bb6 <USART_ClockCtrl+0x11e>
		} else if (pUSARTx == USART2){
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4a42      	ldr	r2, [pc, #264]	; (8000bcc <USART_ClockCtrl+0x134>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d106      	bne.n	8000ad6 <USART_ClockCtrl+0x3e>
			USART2_CLK_EN();
 8000ac8:	4b3f      	ldr	r3, [pc, #252]	; (8000bc8 <USART_ClockCtrl+0x130>)
 8000aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000acc:	4a3e      	ldr	r2, [pc, #248]	; (8000bc8 <USART_ClockCtrl+0x130>)
 8000ace:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ad2:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ad4:	e06f      	b.n	8000bb6 <USART_ClockCtrl+0x11e>
		} else if (pUSARTx == USART3){
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4a3d      	ldr	r2, [pc, #244]	; (8000bd0 <USART_ClockCtrl+0x138>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d106      	bne.n	8000aec <USART_ClockCtrl+0x54>
			USART3_CLK_EN();
 8000ade:	4b3a      	ldr	r3, [pc, #232]	; (8000bc8 <USART_ClockCtrl+0x130>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	4a39      	ldr	r2, [pc, #228]	; (8000bc8 <USART_ClockCtrl+0x130>)
 8000ae4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ae8:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000aea:	e064      	b.n	8000bb6 <USART_ClockCtrl+0x11e>
		} else if (pUSARTx == UART4){
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	4a39      	ldr	r2, [pc, #228]	; (8000bd4 <USART_ClockCtrl+0x13c>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d106      	bne.n	8000b02 <USART_ClockCtrl+0x6a>
			UART4_CLK_EN();
 8000af4:	4b34      	ldr	r3, [pc, #208]	; (8000bc8 <USART_ClockCtrl+0x130>)
 8000af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af8:	4a33      	ldr	r2, [pc, #204]	; (8000bc8 <USART_ClockCtrl+0x130>)
 8000afa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000afe:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000b00:	e059      	b.n	8000bb6 <USART_ClockCtrl+0x11e>
		} else if (pUSARTx == UART5){
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a34      	ldr	r2, [pc, #208]	; (8000bd8 <USART_ClockCtrl+0x140>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d106      	bne.n	8000b18 <USART_ClockCtrl+0x80>
			UART5_CLK_EN();
 8000b0a:	4b2f      	ldr	r3, [pc, #188]	; (8000bc8 <USART_ClockCtrl+0x130>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	4a2e      	ldr	r2, [pc, #184]	; (8000bc8 <USART_ClockCtrl+0x130>)
 8000b10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000b14:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b16:	e04e      	b.n	8000bb6 <USART_ClockCtrl+0x11e>
		} else if (pUSARTx == USART6){
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4a30      	ldr	r2, [pc, #192]	; (8000bdc <USART_ClockCtrl+0x144>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d14a      	bne.n	8000bb6 <USART_ClockCtrl+0x11e>
			USART6_CLK_EN();
 8000b20:	4b29      	ldr	r3, [pc, #164]	; (8000bc8 <USART_ClockCtrl+0x130>)
 8000b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b24:	4a28      	ldr	r2, [pc, #160]	; (8000bc8 <USART_ClockCtrl+0x130>)
 8000b26:	f043 0320 	orr.w	r3, r3, #32
 8000b2a:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000b2c:	e043      	b.n	8000bb6 <USART_ClockCtrl+0x11e>
	}else if (EnORDi == DISABLE){
 8000b2e:	78fb      	ldrb	r3, [r7, #3]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d140      	bne.n	8000bb6 <USART_ClockCtrl+0x11e>
		if (pUSARTx == USART1){
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4a23      	ldr	r2, [pc, #140]	; (8000bc4 <USART_ClockCtrl+0x12c>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d106      	bne.n	8000b4a <USART_ClockCtrl+0xb2>
			USART1_CLK_DI();
 8000b3c:	4b22      	ldr	r3, [pc, #136]	; (8000bc8 <USART_ClockCtrl+0x130>)
 8000b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b40:	4a21      	ldr	r2, [pc, #132]	; (8000bc8 <USART_ClockCtrl+0x130>)
 8000b42:	f023 0310 	bic.w	r3, r3, #16
 8000b46:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000b48:	e035      	b.n	8000bb6 <USART_ClockCtrl+0x11e>
		} else if (pUSARTx == USART2){
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4a1f      	ldr	r2, [pc, #124]	; (8000bcc <USART_ClockCtrl+0x134>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d106      	bne.n	8000b60 <USART_ClockCtrl+0xc8>
			USART2_CLK_DI();
 8000b52:	4b1d      	ldr	r3, [pc, #116]	; (8000bc8 <USART_ClockCtrl+0x130>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	4a1c      	ldr	r2, [pc, #112]	; (8000bc8 <USART_ClockCtrl+0x130>)
 8000b58:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000b5c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b5e:	e02a      	b.n	8000bb6 <USART_ClockCtrl+0x11e>
		} else if (pUSARTx == USART3){
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4a1b      	ldr	r2, [pc, #108]	; (8000bd0 <USART_ClockCtrl+0x138>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d106      	bne.n	8000b76 <USART_ClockCtrl+0xde>
			USART3_CLK_DI();
 8000b68:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <USART_ClockCtrl+0x130>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6c:	4a16      	ldr	r2, [pc, #88]	; (8000bc8 <USART_ClockCtrl+0x130>)
 8000b6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b72:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b74:	e01f      	b.n	8000bb6 <USART_ClockCtrl+0x11e>
		} else if (pUSARTx == UART4){
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4a16      	ldr	r2, [pc, #88]	; (8000bd4 <USART_ClockCtrl+0x13c>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d106      	bne.n	8000b8c <USART_ClockCtrl+0xf4>
			UART4_CLK_DI();
 8000b7e:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <USART_ClockCtrl+0x130>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b82:	4a11      	ldr	r2, [pc, #68]	; (8000bc8 <USART_ClockCtrl+0x130>)
 8000b84:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000b88:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000b8a:	e014      	b.n	8000bb6 <USART_ClockCtrl+0x11e>
		} else if (pUSARTx == UART5){
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4a12      	ldr	r2, [pc, #72]	; (8000bd8 <USART_ClockCtrl+0x140>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d106      	bne.n	8000ba2 <USART_ClockCtrl+0x10a>
			UART5_CLK_DI();
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <USART_ClockCtrl+0x130>)
 8000b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b98:	4a0b      	ldr	r2, [pc, #44]	; (8000bc8 <USART_ClockCtrl+0x130>)
 8000b9a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000b9e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ba0:	e009      	b.n	8000bb6 <USART_ClockCtrl+0x11e>
		} else if (pUSARTx == USART6){
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4a0d      	ldr	r2, [pc, #52]	; (8000bdc <USART_ClockCtrl+0x144>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d105      	bne.n	8000bb6 <USART_ClockCtrl+0x11e>
			USART6_CLK_DI();
 8000baa:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <USART_ClockCtrl+0x130>)
 8000bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bae:	4a06      	ldr	r2, [pc, #24]	; (8000bc8 <USART_ClockCtrl+0x130>)
 8000bb0:	f023 0320 	bic.w	r3, r3, #32
 8000bb4:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000bb6:	bf00      	nop
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	40011000 	.word	0x40011000
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40004400 	.word	0x40004400
 8000bd0:	40004800 	.word	0x40004800
 8000bd4:	40004c00 	.word	0x40004c00
 8000bd8:	40005000 	.word	0x40005000
 8000bdc:	40011400 	.word	0x40011400

08000be0 <USART_SetBaudRate>:

/*
 * USART Initialize and De-Initialize
 */
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t Baud){
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b088      	sub	sp, #32
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	// Variables to hold Mantissa and Fraction values
	uint32_t mantissa,fractional;

	uint32_t tempreg=0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	613b      	str	r3, [r7, #16]

	// Fetch APBx clock values according to USART/UARTx bus lines
	if(pUSARTx == USART1 || pUSARTx == USART6)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4a31      	ldr	r2, [pc, #196]	; (8000cb8 <USART_SetBaudRate+0xd8>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d003      	beq.n	8000bfe <USART_SetBaudRate+0x1e>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4a30      	ldr	r2, [pc, #192]	; (8000cbc <USART_SetBaudRate+0xdc>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d103      	bne.n	8000c06 <USART_SetBaudRate+0x26>
	{
		// USART1 and USART6 are on APB2 bus
		pclk = RCC_GetPCLK2Val();
 8000bfe:	f7ff fed3 	bl	80009a8 <RCC_GetPCLK2Val>
 8000c02:	61f8      	str	r0, [r7, #28]
 8000c04:	e002      	b.n	8000c0c <USART_SetBaudRate+0x2c>
	} else
	{
		// USART2 to UART5 are on APB1 bus
		pclk = RCC_GetPCLK1Val();
 8000c06:	f7ff fe57 	bl	80008b8 <RCC_GetPCLK1Val>
 8000c0a:	61f8      	str	r0, [r7, #28]
	}

	// Check for OVER8 configuration bit
	if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d00b      	beq.n	8000c30 <USART_SetBaudRate+0x50>
	{
		// OVER8 = 1 , oversampling by 8
		usartdiv = ((25 * pclk) / (2 * Baud));
 8000c18:	69fa      	ldr	r2, [r7, #28]
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	4413      	add	r3, r2
 8000c20:	009a      	lsls	r2, r3, #2
 8000c22:	441a      	add	r2, r3
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c2c:	61bb      	str	r3, [r7, #24]
 8000c2e:	e00a      	b.n	8000c46 <USART_SetBaudRate+0x66>
	} else
	{
		// OVER8 = 0, oversampling by 16
		usartdiv = ((25 * pclk) / (4 * Baud));
 8000c30:	69fa      	ldr	r2, [r7, #28]
 8000c32:	4613      	mov	r3, r2
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	4413      	add	r3, r2
 8000c38:	009a      	lsls	r2, r3, #2
 8000c3a:	441a      	add	r2, r3
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c44:	61bb      	str	r3, [r7, #24]
	}

	// Calculate the Mantissa part
	mantissa = usartdiv/100;
 8000c46:	69bb      	ldr	r3, [r7, #24]
 8000c48:	4a1d      	ldr	r2, [pc, #116]	; (8000cc0 <USART_SetBaudRate+0xe0>)
 8000c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c4e:	095b      	lsrs	r3, r3, #5
 8000c50:	60fb      	str	r3, [r7, #12]

	// Copy mantissa into tempreg
	tempreg |= mantissa << 4;
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	011b      	lsls	r3, r3, #4
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]

	// Extract the fraction part
	fractional = (usartdiv - (mantissa * 100));
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	2264      	movs	r2, #100	; 0x64
 8000c60:	fb02 f303 	mul.w	r3, r2, r3
 8000c64:	69ba      	ldr	r2, [r7, #24]
 8000c66:	1ad3      	subs	r3, r2, r3
 8000c68:	617b      	str	r3, [r7, #20]

	// Calculate the final fractional according to oversampling
	if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	68db      	ldr	r3, [r3, #12]
 8000c6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d00a      	beq.n	8000c8c <USART_SetBaudRate+0xac>
	{
		// OVER8 = 1, oversampling by 8
		fractional = (((fractional * 8) + 50) / 100) & ((uint8_t)0x07);
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	00db      	lsls	r3, r3, #3
 8000c7a:	3332      	adds	r3, #50	; 0x32
 8000c7c:	4a10      	ldr	r2, [pc, #64]	; (8000cc0 <USART_SetBaudRate+0xe0>)
 8000c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c82:	095b      	lsrs	r3, r3, #5
 8000c84:	f003 0307 	and.w	r3, r3, #7
 8000c88:	617b      	str	r3, [r7, #20]
 8000c8a:	e009      	b.n	8000ca0 <USART_SetBaudRate+0xc0>

	} else
	{
		// OVER8 = 0, oversampling by 16
		fractional = (((fractional * 16) + 50) / 100) & ((uint8_t)0x0F);
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	011b      	lsls	r3, r3, #4
 8000c90:	3332      	adds	r3, #50	; 0x32
 8000c92:	4a0b      	ldr	r2, [pc, #44]	; (8000cc0 <USART_SetBaudRate+0xe0>)
 8000c94:	fba2 2303 	umull	r2, r3, r2, r3
 8000c98:	095b      	lsrs	r3, r3, #5
 8000c9a:	f003 030f 	and.w	r3, r3, #15
 8000c9e:	617b      	str	r3, [r7, #20]

	}

	// Copy fractional into tempreg
	tempreg |= fractional;
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]

	// Program the mantissa and fractional into the BRR register
	pUSARTx->BRR = tempreg;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	609a      	str	r2, [r3, #8]
}
 8000cae:	bf00      	nop
 8000cb0:	3720      	adds	r7, #32
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40011000 	.word	0x40011000
 8000cbc:	40011400 	.word	0x40011400
 8000cc0:	51eb851f 	.word	0x51eb851f

08000cc4 <USART_Init>:

void USART_Init(USART_Handler_t *pUSARTHandler)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
	uint32_t tempreg=0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60fb      	str	r3, [r7, #12]
	USART_ClockCtrl(pUSARTHandler->pUSARTx, ENABLE);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fede 	bl	8000a98 <USART_ClockCtrl>

	/*
	 * Configuring USART_CR1 Register
	 */
	// Enable USART TX and RX engines according to the USART_Mode
	if (pUSARTHandler->USART_Config.USART_Mode == USART_MODE_RX)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	791b      	ldrb	r3, [r3, #4]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d104      	bne.n	8000cee <USART_Init+0x2a>
	{
		// Enable Receiver Bit field
		tempreg |= (1 << USART_CR1_RE);
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	f043 0304 	orr.w	r3, r3, #4
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	e014      	b.n	8000d18 <USART_Init+0x54>
	} else if (pUSARTHandler->USART_Config.USART_Mode == USART_MODE_TX)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	791b      	ldrb	r3, [r3, #4]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d104      	bne.n	8000d00 <USART_Init+0x3c>
	{
		// Enable Transmitter Bit field
		tempreg |= ( 1 << USART_CR1_TE );
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	f043 0308 	orr.w	r3, r3, #8
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	e00b      	b.n	8000d18 <USART_Init+0x54>
	} else if (pUSARTHandler->USART_Config.USART_Mode == USART_MODE_TXRX)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	791b      	ldrb	r3, [r3, #4]
 8000d04:	2b02      	cmp	r3, #2
 8000d06:	d107      	bne.n	8000d18 <USART_Init+0x54>
	{
		// Enable both TE and RE
		tempreg |= ( 1 << USART_CR1_RE);
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	f043 0304 	orr.w	r3, r3, #4
 8000d0e:	60fb      	str	r3, [r7, #12]
		tempreg |= ( 1 << USART_CR1_TE);
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f043 0308 	orr.w	r3, r3, #8
 8000d16:	60fb      	str	r3, [r7, #12]
	}

    // Configure Word length
	tempreg |= pUSARTHandler->USART_Config.USART_WordLen << USART_CR1_M ;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	7b5b      	ldrb	r3, [r3, #13]
 8000d1c:	031b      	lsls	r3, r3, #12
 8000d1e:	461a      	mov	r2, r3
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	60fb      	str	r3, [r7, #12]

	//Configuration of parity control bit fields
	if (pUSARTHandler->USART_Config.USART_Parity == USART_PAR_EVEN)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	7b9b      	ldrb	r3, [r3, #14]
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d104      	bne.n	8000d38 <USART_Init+0x74>
	{
		// Enable the parity control bit
		tempreg |= ( 1 << USART_CR1_PCE);
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	e00b      	b.n	8000d50 <USART_Init+0x8c>

		// By default, Parity set to EVEN. Enabling the Parity Bit enough for even parity checking
	}else if (pUSARTHandler->USART_Config.USART_Parity == USART_PAR_ODD )
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	7b9b      	ldrb	r3, [r3, #14]
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	d107      	bne.n	8000d50 <USART_Init+0x8c>
	{
		//Implement the code to enable the parity control
	    tempreg |= ( 1 << USART_CR1_PCE);
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d46:	60fb      	str	r3, [r7, #12]

	    //Implement the code to enable ODD parity
	    tempreg |= ( 1 << USART_CR1_PS);
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d4e:	60fb      	str	r3, [r7, #12]
	}

	// Program the configuration into CR1 register
	pUSARTHandler->pUSARTx->CR1 = tempreg;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	68fa      	ldr	r2, [r7, #12]
 8000d56:	60da      	str	r2, [r3, #12]

	/*
	 *  Configuring USART_CR2 Register
	 */
	tempreg=0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]

	// Configure number of stop bits inserted at end of USART frame
	tempreg |= (pUSARTHandler->USART_Config.USART_NumStopbits << USART_CR2_STOP);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	7b1b      	ldrb	r3, [r3, #12]
 8000d60:	031b      	lsls	r3, r3, #12
 8000d62:	461a      	mov	r2, r3
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	60fb      	str	r3, [r7, #12]

	// Program the configuration into CR2 register
	pUSARTHandler->pUSARTx->CR2 = tempreg;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	68fa      	ldr	r2, [r7, #12]
 8000d70:	611a      	str	r2, [r3, #16]

	/*
	 *  Configuring USART_CR3 Register
	 */
	tempreg=0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]

	// Configure Hardware Flow Control
	if (pUSARTHandler->USART_Config.USART_HWFlowCtrl == USART_HW_FLOW_CTRL_CTS)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	7bdb      	ldrb	r3, [r3, #15]
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d104      	bne.n	8000d88 <USART_Init+0xc4>
	{
		// Enable CTS flow control
		tempreg |= (1 << USART_CR3_CTSE);
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	e014      	b.n	8000db2 <USART_Init+0xee>
	}else if (pUSARTHandler->USART_Config.USART_HWFlowCtrl == USART_HW_FLOW_CTRL_RTS)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	7bdb      	ldrb	r3, [r3, #15]
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d104      	bne.n	8000d9a <USART_Init+0xd6>
	{
		//Implement the code to enable RTS flow control
		tempreg |= (1 << USART_CR3_RTSE);
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	f043 0301 	orr.w	r3, r3, #1
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	e00b      	b.n	8000db2 <USART_Init+0xee>

	}else if (pUSARTHandler->USART_Config.USART_HWFlowCtrl == USART_HW_FLOW_CTRL_CTS_RTS)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	7bdb      	ldrb	r3, [r3, #15]
 8000d9e:	2b03      	cmp	r3, #3
 8000da0:	d107      	bne.n	8000db2 <USART_Init+0xee>
	{
		//Implement the code to enable both CTS and RTS Flow control
		tempreg |= (1 << USART_CR3_CTSE);
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	60fb      	str	r3, [r7, #12]
		tempreg |= (1 << USART_CR3_RTSE);
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	60fb      	str	r3, [r7, #12]
	}

	// Program the configuration into CR3 register
	pUSARTHandler->pUSARTx->CR3 = tempreg;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	68fa      	ldr	r2, [r7, #12]
 8000db8:	615a      	str	r2, [r3, #20]

	/*
	 *  Configuring USART_BRR Register
	 */
	//Implement the code to configure the baud rate
	USART_SetBaudRate(pUSARTHandler->pUSARTx, pUSARTHandler->USART_Config.USART_Baud);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	f7ff ff0b 	bl	8000be0 <USART_SetBaudRate>
}
 8000dca:	bf00      	nop
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <USART_SendData>:
}

/*
 * Data Send and Receive
 */
void USART_SendData(USART_Handler_t *pUSARTHandler, uint8_t *pTXBuffer, uint32_t Len){
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b086      	sub	sp, #24
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	60f8      	str	r0, [r7, #12]
 8000dda:	60b9      	str	r1, [r7, #8]
 8000ddc:	607a      	str	r2, [r7, #4]
	uint16_t *pdata;

	// Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
 8000de2:	e031      	b.n	8000e48 <USART_SendData+0x76>
	{
		// Wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandler->pUSARTx, USART_FLAG_TXE));
 8000de4:	bf00      	nop
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	2180      	movs	r1, #128	; 0x80
 8000dec:	4618      	mov	r0, r3
 8000dee:	f000 f83e 	bl	8000e6e <USART_GetFlagStatus>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d0f6      	beq.n	8000de6 <USART_SendData+0x14>

		// Check the USART_WordLength for 9 bits or 8 bits in a frame
		if(pUSARTHandler->USART_Config.USART_WordLen == USART_WORDLEN_9BIT)
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	7b5b      	ldrb	r3, [r3, #13]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d118      	bne.n	8000e32 <USART_SendData+0x60>
		{
			// If 9BIT, load the DR with 2bytes masking the bits other than first 9 bits
			pdata = (uint16_t*) pTXBuffer;
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	613b      	str	r3, [r7, #16]
			pUSARTHandler->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	881b      	ldrh	r3, [r3, #0]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000e12:	605a      	str	r2, [r3, #4]

			// Check for Parity configuration
			if(pUSARTHandler->USART_Config.USART_Parity == USART_PAR_OFF)
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	7b9b      	ldrb	r3, [r3, #14]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d106      	bne.n	8000e2a <USART_SendData+0x58>
			{
				// 9Bits of data being sent, with no parity bit
				// 16Bit buffer being used hence increment pTXBuffer twice
				pTXBuffer++;
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	60bb      	str	r3, [r7, #8]
				pTXBuffer++;
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	3301      	adds	r3, #1
 8000e26:	60bb      	str	r3, [r7, #8]
 8000e28:	e00b      	b.n	8000e42 <USART_SendData+0x70>
			}
			else
			{
				// 8Bits of data being sent, 9th bit is parity bit
				// Parity bit is auto set by hardware, hence increment pTXBuffer once
				pTXBuffer++;
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	e007      	b.n	8000e42 <USART_SendData+0x70>
			}
		}
		else
		{
			// 8BIT transfer of data, load pTXBuffer into DR
			pUSARTHandler->pUSARTx->DR = (*pTXBuffer & (uint8_t)0xFF);
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	781a      	ldrb	r2, [r3, #0]
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	605a      	str	r2, [r3, #4]

			// Increment the buffer address
			pTXBuffer++;
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	3301      	adds	r3, #1
 8000e46:	617b      	str	r3, [r7, #20]
 8000e48:	697a      	ldr	r2, [r7, #20]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d3c9      	bcc.n	8000de4 <USART_SendData+0x12>
			// to 7bits is redundant.
		}
	}

	// Wait till Transmission is complete (TC Bit in SR)
	while( ! USART_GetFlagStatus(pUSARTHandler->pUSARTx,USART_FLAG_TC));
 8000e50:	bf00      	nop
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2140      	movs	r1, #64	; 0x40
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f000 f808 	bl	8000e6e <USART_GetFlagStatus>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d0f6      	beq.n	8000e52 <USART_SendData+0x80>
}
 8000e64:	bf00      	nop
 8000e66:	bf00      	nop
 8000e68:	3718      	adds	r7, #24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <USART_GetFlagStatus>:

/*
 * Other Peripheral Control APIs
 */
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint32_t FlagName)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	b083      	sub	sp, #12
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
 8000e76:	6039      	str	r1, [r7, #0]
	if (pUSARTx->SR & FlagName)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <USART_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000e84:	2301      	movs	r3, #1
 8000e86:	e000      	b.n	8000e8a <USART_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <USART_PeripheralConfig>:
{
	pUSARTx->SR &= ~(FlagName);
}

void USART_PeripheralConfig(USART_RegDef_t *pUSARTx, uint8_t EnORDi)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	70fb      	strb	r3, [r7, #3]
	if (EnORDi == ENABLE){
 8000ea2:	78fb      	ldrb	r3, [r7, #3]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d106      	bne.n	8000eb6 <USART_PeripheralConfig+0x20>
		pUSARTx->CR1 |= (1 << USART_CR1_UE);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	60da      	str	r2, [r3, #12]
	} else
	{
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
	}
}
 8000eb4:	e005      	b.n	8000ec2 <USART_PeripheralConfig+0x2c>
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	68db      	ldr	r3, [r3, #12]
 8000eba:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	60da      	str	r2, [r3, #12]
}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
	...

08000ed0 <__libc_init_array>:
 8000ed0:	b570      	push	{r4, r5, r6, lr}
 8000ed2:	4d0d      	ldr	r5, [pc, #52]	; (8000f08 <__libc_init_array+0x38>)
 8000ed4:	4c0d      	ldr	r4, [pc, #52]	; (8000f0c <__libc_init_array+0x3c>)
 8000ed6:	1b64      	subs	r4, r4, r5
 8000ed8:	10a4      	asrs	r4, r4, #2
 8000eda:	2600      	movs	r6, #0
 8000edc:	42a6      	cmp	r6, r4
 8000ede:	d109      	bne.n	8000ef4 <__libc_init_array+0x24>
 8000ee0:	4d0b      	ldr	r5, [pc, #44]	; (8000f10 <__libc_init_array+0x40>)
 8000ee2:	4c0c      	ldr	r4, [pc, #48]	; (8000f14 <__libc_init_array+0x44>)
 8000ee4:	f000 f818 	bl	8000f18 <_init>
 8000ee8:	1b64      	subs	r4, r4, r5
 8000eea:	10a4      	asrs	r4, r4, #2
 8000eec:	2600      	movs	r6, #0
 8000eee:	42a6      	cmp	r6, r4
 8000ef0:	d105      	bne.n	8000efe <__libc_init_array+0x2e>
 8000ef2:	bd70      	pop	{r4, r5, r6, pc}
 8000ef4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ef8:	4798      	blx	r3
 8000efa:	3601      	adds	r6, #1
 8000efc:	e7ee      	b.n	8000edc <__libc_init_array+0xc>
 8000efe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f02:	4798      	blx	r3
 8000f04:	3601      	adds	r6, #1
 8000f06:	e7f2      	b.n	8000eee <__libc_init_array+0x1e>
 8000f08:	08000f38 	.word	0x08000f38
 8000f0c:	08000f38 	.word	0x08000f38
 8000f10:	08000f38 	.word	0x08000f38
 8000f14:	08000f3c 	.word	0x08000f3c

08000f18 <_init>:
 8000f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f1a:	bf00      	nop
 8000f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f1e:	bc08      	pop	{r3}
 8000f20:	469e      	mov	lr, r3
 8000f22:	4770      	bx	lr

08000f24 <_fini>:
 8000f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f26:	bf00      	nop
 8000f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f2a:	bc08      	pop	{r3}
 8000f2c:	469e      	mov	lr, r3
 8000f2e:	4770      	bx	lr
